---
- name: "System and Application Backup"
  hosts: all
  remote_user: "{{ ansible_user }}"
  gather_facts: true
  become: true
  vars_files:
    - "{{ inventory_dir }}/group_vars/vault.yml"
  tags:
    - backup

  vars:
    backup_timestamp: "{{ lookup('pipe', 'date +%Y%m%d-%H%M%S') }}"
    backup_base_dir: "/opt/backups"
    backup_archive_prefix: "summitethic-backup"

  tasks:
    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ backup_base_dir }}/{{ backup_timestamp }}"
        state: directory
        mode: "0750"
      tags: [backup, prepare]

    - name: Backup Docker volumes
      when: backup_docker_volumes | default(true)
      tags: [backup, docker]
      block:
        - name: Get list of volumes
          ansible.builtin.command: docker volume ls -q
          register: docker_volumes
          changed_when: false

        - name: Backup each Docker volume
          ansible.builtin.shell: >
            docker run --rm -v {{ item }}:/volume
            -v {{ backup_base_dir }}/{{ backup_timestamp }}:/backup
            alpine sh -c "tar -czf /backup/volume-{{ item }}.tar.gz -C /volume ."
          loop: "{{ docker_volumes.stdout_lines }}"
          when: docker_volumes.stdout_lines | length > 0
          changed_when: true

    - name: Backup configuration files
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ backup_base_dir }}/{{ backup_timestamp }}/configs/"
        remote_src: true
        directory_mode: true
        mode: "0644"
      loop:
        - "/etc/docker/"
        - "/opt/traefik/"
        - "/opt/monitoring/"
        - "/opt/mailcow/"
      loop_control:
        label: "{{ item }}"
      tags: [backup, configs]

    - name: Archive backup
      community.general.archive:
        path: "{{ backup_base_dir }}/{{ backup_timestamp }}"
        dest: "{{ backup_base_dir }}/{{ backup_archive_prefix }}-{{ backup_timestamp }}.tar.gz"
        format: gz
        mode: "0640"
      tags: [backup, archive]

    - name: Remove backup directory
      ansible.builtin.file:
        path: "{{ backup_base_dir }}/{{ backup_timestamp }}"
        state: absent
      tags: [backup, cleanup]

    # Add remote backup logic if needed
    - name: Upload backup to remote storage
      ansible.builtin.shell: >
        aws s3 cp {{ backup_base_dir }}/{{ backup_archive_prefix }}-{{ backup_timestamp }}.tar.gz
        s3://{{ s3_backup_bucket }}/{{ inventory_hostname }}/
      environment:
        AWS_ACCESS_KEY_ID: "{{ vault_backup_aws_key }}"
        AWS_SECRET_ACCESS_KEY: "{{ vault_backup_aws_secret }}"
      when:
        - s3_backup_enabled | default(false)
        - s3_backup_bucket is defined
      tags: [backup, s3]

    - name: Display backup information
      ansible.builtin.debug:
        msg: |
          Backup completed successfully.
          Backup file: {{ backup_base_dir }}/{{ backup_archive_prefix }}-{{ backup_timestamp }}.tar.gz
      tags: [backup, info]
