#!/bin/bash
# System Backup Script - Generated by Ansible

set -e

# Configuration
BACKUP_DIR="{{ backup_base_dir }}/system"
DATE=$(date +%Y%m%d-%H%M%S)
BACKUP_FILE="system-backup-${DATE}.tar.gz"
HOSTNAME=$(hostname)
EXCLUDE_OPTS=""

# Create exclude options
{% for dir in backup_system_dirs %}
{% for exclude in dir.exclude %}
EXCLUDE_OPTS="${EXCLUDE_OPTS} --exclude={{ exclude }}"
{% endfor %}
{% endfor %}

echo "Starting system backup at $(date)"
echo "Backup file: ${BACKUP_DIR}/${BACKUP_FILE}"

# Create temporary directory for staging
TEMP_DIR=$(mktemp -d)
trap "rm -rf ${TEMP_DIR}" EXIT

{% for dir in backup_system_dirs %}
echo "Backing up {{ dir.path }}..."
mkdir -p "${TEMP_DIR}{{ dir.path }}"
rsync -az --relative ${EXCLUDE_OPTS} {{ dir.path }}/* "${TEMP_DIR}{{ dir.path }}/"
{% endfor %}

# Archive all the backed up directories
echo "Creating compressed archive..."
# Use pigz (parallel gzip) if available
if command -v pigz > /dev/null; then
  tar -c -C ${TEMP_DIR} . | pigz -9 > "${BACKUP_DIR}/${BACKUP_FILE}"
else
  tar -czf "${BACKUP_DIR}/${BACKUP_FILE}" -C ${TEMP_DIR} .
fi

# Encrypt backup if enabled
{% if backup_encrypt %}
if [ -f "{{ backup_base_dir }}/.encryption_key" ]; then
  echo "Encrypting backup..."
  gpg --batch --yes --passphrase-file "{{ backup_base_dir }}/.encryption_key" \
      --symmetric --cipher-algo AES256 "${BACKUP_DIR}/${BACKUP_FILE}"
  rm "${BACKUP_DIR}/${BACKUP_FILE}"
  echo "Encryption completed."
fi
{% endif %}

# Calculate file size and hash
if [ -f "${BACKUP_DIR}/${BACKUP_FILE}{% if backup_encrypt %}.gpg{% endif %}" ]; then
  SIZE=$(du -h "${BACKUP_DIR}/${BACKUP_FILE}{% if backup_encrypt %}.gpg{% endif %}" | cut -f1)
  SHA256=$(sha256sum "${BACKUP_DIR}/${BACKUP_FILE}{% if backup_encrypt %}.gpg{% endif %}" | cut -d' ' -f1)
  
  echo "Backup completed at $(date)"
  echo "Backup size: ${SIZE}"
  echo "SHA256: ${SHA256}"
else
  echo "ERROR: Backup file not created!"
  exit 1
fi