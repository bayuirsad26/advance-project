#!/bin/bash
# MySQL Backup Script - Generated by Ansible

set -e

# Configuration
BACKUP_DIR="{{ backup_base_dir }}/databases/mysql"
DATE=$(date +%Y%m%d-%H%M%S)
MYSQL_USER="{{ backup_databases.mysql.user }}"
MYSQL_PASSWORD="{{ backup_databases.mysql.password }}"
MYSQL_HOST="{{ backup_databases.mysql.host }}"
MYSQL_OPTS="-h${MYSQL_HOST} -u${MYSQL_USER}"

if [ -n "${MYSQL_PASSWORD}" ]; then
  MYSQL_OPTS="${MYSQL_OPTS} -p${MYSQL_PASSWORD}"
fi

# Create backup directory if it doesn't exist
mkdir -p "${BACKUP_DIR}"

echo "Starting MySQL backup at $(date)"

# Get list of databases
if [ -z "{{ backup_databases.mysql.databases | join(' ') }}" ]; then
  DATABASES=$(mysql ${MYSQL_OPTS} -e "SHOW DATABASES;" | grep -v "Database\|information_schema\|performance_schema\|sys" | tr -d "| ")
else
  DATABASES="{{ backup_databases.mysql.databases | join(' ') }}"
fi

# Backup each database
for DB in ${DATABASES}; do
  BACKUP_FILE="${BACKUP_DIR}/${DB}-${DATE}.sql.gz"
  echo "Backing up database: ${DB} to ${BACKUP_FILE}"
  
  # Using pipe allows us to see progress and compress on-the-fly
  mysqldump ${MYSQL_OPTS} --single-transaction --quick --routines --triggers --events "${DB}" | \
    gzip > "${BACKUP_FILE}"
    
  # Encrypt backup if enabled
  {% if backup_encrypt %}
  if [ -f "{{ backup_base_dir }}/.encryption_key" ]; then
    echo "Encrypting backup..."
    gpg --batch --yes --passphrase-file "{{ backup_base_dir }}/.encryption_key" \
        --symmetric --cipher-algo AES256 "${BACKUP_FILE}"
    rm "${BACKUP_FILE}"
    BACKUP_FILE="${BACKUP_FILE}.gpg"
    echo "Encryption completed."
  fi
  {% endif %}
  
  # Check if backup was successful
  if [ -f "${BACKUP_FILE}" ]; then
    SIZE=$(du -h "${BACKUP_FILE}" | cut -f1)
    echo "Backup of ${DB} completed successfully (${SIZE})"
  else
    echo "ERROR: Backup of ${DB} failed!"
    exit 1
  fi
done

echo "All MySQL backups completed at $(date)"