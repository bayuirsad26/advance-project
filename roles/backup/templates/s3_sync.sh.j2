#!/bin/bash
# S3 backup sync script - Generated by Ansible

set -e

# Configuration
BACKUP_DIR="{{ backup_base_dir }}"
S3_BUCKET="{{ backup_s3_bucket }}"
S3_PREFIX="{{ backup_s3_prefix }}"
S3_REGION="{{ backup_s3_region }}"

echo "Starting S3 backup sync at $(date)"

# Check if AWS CLI is installed
if ! command -v aws &> /dev/null; then
  echo "Error: AWS CLI is not installed"
  exit 1
fi

# Sync to S3
aws s3 sync "${BACKUP_DIR}/" "s3://${S3_BUCKET}/${S3_PREFIX}/" \
  --region "${S3_REGION}" \
  --only-show-errors \
  --storage-class STANDARD_IA \
  --exclude "logs/*" \
  --exclude "scripts/*" \
  --exclude ".*"

echo "S3 backup sync completed at $(date)"

# Cleanup old backups if retention is set
if [ {{ backup_remote_retention }} -gt 0 ]; then
  echo "Checking for old backups to remove (older than {{ backup_remote_retention }} days)..."
  
  # Calculate the cutoff date in ISO8601 format
  CUTOFF_DATE=$(date -d "{{ backup_remote_retention }} days ago" -I)
  
  # List objects older than cutoff date and delete them
  aws s3api list-objects-v2 \
    --bucket "${S3_BUCKET}" \
    --prefix "${S3_PREFIX}/" \
    --query "Contents[?LastModified<='${CUTOFF_DATE}'].Key" \
    --output text | \
  while read -r key; do
    if [ -n "${key}" ]; then
      echo "Removing old backup: ${key}"
      aws s3 rm "s3://${S3_BUCKET}/${key}"
    fi
  done
  
  echo "Remote cleanup completed"
fi