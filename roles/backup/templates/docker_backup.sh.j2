#!/bin/bash
# Docker Volume Backup Script - Generated by Ansible

set -e

# Configuration
BACKUP_DIR="{{ backup_base_dir }}/docker"
DATE=$(date +%Y%m%d-%H%M%S)
BACKUP_FILE="docker-volumes-${DATE}.tar.gz"
EXCLUDE_PATTERN="{{ backup_exclude_volumes | join('|') }}"

# Create backup directory if it doesn't exist
mkdir -p "${BACKUP_DIR}"

echo "Starting Docker volume backup at $(date)"

# Get list of volumes
VOLUMES=$(docker volume ls --format "{{.Name}}" | grep -v -E "${EXCLUDE_PATTERN}")

if [ -z "${VOLUMES}" ]; then
  echo "No Docker volumes found to backup"
  exit 0
fi

# Create temporary directory for volume backups
TEMP_DIR=$(mktemp -d)
trap "rm -rf ${TEMP_DIR}" EXIT

# Backup each volume
for VOLUME in ${VOLUMES}; do
  echo "Backing up volume: ${VOLUME}"
  VOLUME_DIR="${TEMP_DIR}/${VOLUME}"
  mkdir -p "${VOLUME_DIR}"
  
  # Use a temporary container to access the volume data
  docker run --rm -v ${VOLUME}:/volume -v ${VOLUME_DIR}:/backup alpine sh -c "cp -r /volume/. /backup/"
done

# Archive all volumes
echo "Creating compressed archive..."
if command -v pigz > /dev/null; then
  tar -c -C ${TEMP_DIR} . | pigz -9 > "${BACKUP_DIR}/${BACKUP_FILE}"
else
  tar -czf "${BACKUP_DIR}/${BACKUP_FILE}" -C ${TEMP_DIR} .
fi

# Encrypt backup if enabled
{% if backup_encrypt %}
if [ -f "{{ backup_base_dir }}/.encryption_key" ]; then
  echo "Encrypting backup..."
  gpg --batch --yes --passphrase-file "{{ backup_base_dir }}/.encryption_key" \
      --symmetric --cipher-algo AES256 "${BACKUP_DIR}/${BACKUP_FILE}"
  rm "${BACKUP_DIR}/${BACKUP_FILE}"
  BACKUP_FILE="${BACKUP_FILE}.gpg"
  echo "Encryption completed."
fi
{% endif %}

# Calculate file size and hash
if [ -f "${BACKUP_DIR}/${BACKUP_FILE}" ]; then
  SIZE=$(du -h "${BACKUP_DIR}/${BACKUP_FILE}" | cut -f1)
  SHA256=$(sha256sum "${BACKUP_DIR}/${BACKUP_FILE}" | cut -d' ' -f1)
  
  echo "Backup completed at $(date)"
  echo "Backup size: ${SIZE}"
  echo "SHA256: ${SHA256}"
else
  echo "ERROR: Backup file not created!"
  exit 1
fi